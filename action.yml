name: "PUML to PNG Commit & PR"
description: "Generates PNG from all PUML files found in a PR diff, commits and posts to PR"
branding:
  icon: "image"
  color: "orange"
inputs:
  botEmail:
    description: "E-mail address for git commit"
    required: true
  botGithubToken:
    description: "token of GitHub to commit"
    required: false
  enableReviewComment:
    description: "whether post review comment or not"
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Verify conditions
      shell: bash
      run: |
        # verify
        if [[ ! "${GITHUB_BASE_REF}" ]]; then
          echo "ERROR: This action is only for pull-request events."
          exit 1
        fi
        if [[ ! "${{ inputs.botEmail }}" ]]; then
          echo "ERROR: Please set inputs.botEmail"
          exit 1
        fi
        if [[ "${{ inputs.enableReviewComment }}" = "true" && ! "${{ inputs.botGithubToken }}" ]]; then
          echo "ERROR: Please set inputs.botGithubToken"
          exit 1
        fi

    - uses: actions/setup-java@v3
      with:
        distribution: 'liberica'
        java-version: '8'

    - name: Install required utils
      shell: bash
      run: |
        sudo apt-get install -y fonts-ipafont graphviz
        curl -o plantuml.jar -L https://github.com/plantuml/plantuml/releases/download/v1.2022.12/plantuml.jar

    - name: Generate PNGs
      shell: bash
      run: |
        printenv # DEBUG

        # generate
        git config --global --add safe.directory ${GITHUB_WORKSPACE}
        git fetch
        SRC_FILES=$(git diff origin/${GITHUB_BASE_REF} --name-only | grep ".puml" || true)

        echo "SRC_FILES: ${SRC_FILES}" # DEBUG

        if [[ ${#SRC_FILES} -lt 1 ]]; then
          echo "INFO: No PlantUML files found in this pull request"
          exit 0
        fi

        for SRC_FILE in ${SRC_FILES}; do
          java -jar plantuml.jar $SRC_FILE -charset UTF-8
          echo "generate from $SRC_FILE"
        done

        # commit
        if [[ ! $(git status --porcelain) ]]; then
          exit 0
        fi
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${{ inputs.botEmail }}"
        git checkout ${GITHUB_HEAD_REF}
        git add .
        git commit -m "docs: add generated diagrams"
        git push origin HEAD:${GITHUB_HEAD_REF}
        echo "comitted png files"

        # add review comment
        if [[ "${{ inputs.enableReviewComment }}" != "true" ]]; then
          exit 0
        fi
        git fetch
        GITHUB_SHA_AFTER=$(git rev-parse origin/${GITHUB_HEAD_REF})
        DIFF_FILES=`git diff ${GITHUB_SHA} ${GITHUB_SHA_AFTER} --name-only | grep ".png"`
        echo $DIFF_FILES
        BODY="## Diagrams changed\n"
        for DIFF_FILE in ${DIFF_FILES}; do
          TEMP=`cat << EOS
        ### [${DIFF_FILE}](https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_SHA_AFTER}/${DIFF_FILE})\n
        <details><summary>Before</summary>\n
        \n
        ![before](https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_SHA}/${DIFF_FILE}?raw=true)\n
        \n
        </details>\n
        \n
        ![after](https://github.com/${GITHUB_REPOSITORY}/blob/${GITHUB_SHA_AFTER}/${DIFF_FILE}?raw=true)\n
        \n
        EOS
          `
          BODY=${BODY}${TEMP}
        done
        BODY=`echo ${BODY} | sed -e "s/\:/\\\:/g"`
        PULL_NUM=`echo ${GITHUB_REF} | sed -r "s/refs\/pull\/([0-9]+)\/merge/\1/"`
        echo "body: ${BODY}"
        echo "pull-num: ${PULL_NUM}"
        curl -X POST \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ inputs.botGithubToken }}" \
          -d "{\"event\": \"COMMENT\", \"body\": \"${BODY}\"}" \
          "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/pulls/${PULL_NUM}/reviews"
        echo "added review comments"
